{"version":3,"sources":["../esm2015/projects/user-lib/src/lib/components/change-password-form/change-password-form.component.html","../esm2015/projects/user-lib/src/lib/components/change-password-form/change-password-form.component.ts","../projects/user-lib/src/lib/models/CurrentUser.ts","../projects/user-lib/src/lib/services/users.service.ts","../esm2015/projects/user-lib/src/lib/components/current-user/current-user.component.html","../esm2015/projects/user-lib/src/lib/components/current-user/current-user.component.ts","../esm2015/projects/user-lib/src/lib/components/login-form/login-form.component.html","../esm2015/projects/user-lib/src/lib/components/login-form/login-form.component.ts","../esm2015/projects/user-lib/src/lib/components/user-profile/user-profile.component.ts","../esm2015/projects/user-lib/src/lib/components/user-profile/user-profile.component.html","../../projects/user-lib/src/lib/user-lib.module.ts","../projects/user-lib/src/lib/services/allowed-roles-guard.service.ts","../projects/user-lib/src/lib/services/authorization-interceptor.service.ts","../projects/user-lib/src/lib/services/logged-in-guard.service.ts"],"names":["i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","ChangePasswordFormComponent","fb","this","changePassword","EventEmitter","prototype","ngOnInit","changePasswordForm","group","currentPassword","newPassword","confirmPassword","validators","confirmValue","doChangePassword","valid","emit","value","i0","ɵɵdirectiveInject","i1","FormBuilder","selectors","outputs","decls","vars","consts","template","rf","ctx","i0.ɵɵtemplate","i0.ɵɵelement","i0.ɵɵlistener","i0.ɵɵproperty","i0.ɵɵadvance","CurrentUser","username","userKind","displayName","roles","addRole","roleName","Error","push","hasRole","roleNames","intersection","length","UsersService","httpClient","accessToken","currentUser","loginEmployee","password","_this","post","kind","pipe","tap","userResult","localStorage","refreshToken","map","forEach","role","refreshUser","get","userRefresh","of","oldPassword","getCurrentUser","getAccessToken","getRefreshToken","logoutUser","i0.ɵɵtextInterpolate2","ɵɵinject","i1$1","HttpClient","factory","ɵfac","providedIn","CurrentUserComponent","router","usersSvc","Object","defineProperty","_b","_a","navigateToProfile","navigateByUrl","navigateToLogout","navigateToLogin","i1$2","Router","LoginFormComponent","loginFormSubmitted","login","clear","loginForm","invalid","Validators","required","doLogin","doClear","reset","UserProfileComponent","userProfile","inputs","i0.ɵɵtextInterpolate1","UserLibModule","imports","CommonModule","ReactiveFormsModule","HttpClientModule","MatListModule","MatToolbarModule","MatSidenavModule","MatButtonModule","MatIconModule","MatCardModule","MatFormFieldModule","MatInputModule","MatMenuModule","MatTableModule","MatSnackBarModule","declarations","exports","AllowedRolesGuardService","snackBar","canActivate","route","state","data","snackBarRef_1","open","title","onAction","subscribe","dismiss","i2$1","MatSnackBar","AuthorizationInterceptorService","withAccessToken","req","clone","headers","set","withRefreshToken","method","intercept","next","url","endsWith","handle","catchError","err","caught","HttpErrorResponse","status","switchMap","throwError","LoggedInGuardService","parseUrl"],"mappings":"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","sourcesContent":["<form class=\"change-password-form\" [formGroup]=\"changePasswordForm\">\n\n  <div class=\"mat-error error\" *ngIf=\"changePasswordForm?.errors?.confirmValue\">\n    <mat-icon aria-hidden=\"false\" aria-label=\"Error\">error</mat-icon>\n    The new password and the confirm password do not match.\n  </div>\n\n  <div class=\"form-field\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Current Password</mat-label>\n      <input matInput type=\"password\" formControlName=\"currentPassword\">\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-field\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>New Password</mat-label>\n      <input matInput type=\"password\" formControlName=\"newPassword\">\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-field\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Confirm Password</mat-label>\n      <input matInput type=\"password\" formControlName=\"confirmPassword\">\n    </mat-form-field>\n  </div>\n\n  <div class=\"buttons\">\n    <button type=\"button\" (click)=\"doChangePassword()\" mat-raised-button color=\"primary\">\n      Change Password\n    </button>\n  </div>\n\n\n</form>","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\nimport { ChangePasswordForm } from '../../models/ChangePasswordForm';\nimport { confirmValue } from '@t4d-wnow/shared-lib';\n\n@Component({\n  selector: 'app-change-password-form',\n  templateUrl: './change-password-form.component.html',\n  styleUrls: ['./change-password-form.component.css']\n})\nexport class ChangePasswordFormComponent implements OnInit {\n\n  @Output()\n  changePassword = new EventEmitter<ChangePasswordForm>();\n\n  changePasswordForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.changePasswordForm = this.fb.group({\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n    }, { validators: [confirmValue('newPassword', 'confirmPassword')] });\n  }\n\n  public doChangePassword() {\n    if (this.changePasswordForm.valid) {\n      this.changePassword.emit(this.changePasswordForm.value);\n    }\n  }\n\n}\n","import { intersection } from 'lodash-es';\n\nexport class CurrentUser {\n\n  public username: string;\n  public userKind: string;\n  public displayName: string;\n  public roles: string[];\n\n  constructor(username: string, userKind: string, displayName: string) {\n    this.username = username;\n    this.userKind = userKind;\n    this.displayName = displayName;\n    this.roles = [];\n  }\n\n  public addRole(roleName: string): CurrentUser {\n    if (!roleName) throw new Error('role name cannot be empty');\n    this.roles.push(roleName);\n    return this;\n  }\n\n  public hasRole(roleNames: string[]): boolean {\n    return intersection(this.roles, roleNames).length > 0;\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport { UserResult } from '../models/UserResult';\nimport { UserRefresh } from '../models/UserRefresh';\nimport { CurrentUser } from '../models/CurrentUser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  private accessToken: string | null = null;\n  private currentUser: CurrentUser | null = null;\n\n  constructor(private httpClient: HttpClient) { }\n\n  public loginEmployee(username: string, password: string): Observable<CurrentUser> {\n\n    return this.httpClient\n      .post<UserResult>(\n        '/api/users/login',\n        { username, password, kind: 'employee' })\n      .pipe(\n        tap(userResult => {\n          this.accessToken = userResult.accessToken;\n          localStorage.refreshToken = userResult.refreshToken;\n        }),\n        map(userResult => {\n          const currentUser = new CurrentUser(userResult.username, userResult.userKind, userResult.displayName);\n          userResult.roles.forEach(role => currentUser.addRole(role));\n          return currentUser;\n        }),\n        tap(currentUser => {\n          this.currentUser = currentUser\n        }),\n      );\n  }\n\n  public refreshUser(): Observable<Observable<boolean>> {\n    return this.httpClient.get<UserRefresh>('/api/users/refresh').pipe(\n      tap(userRefresh => {\n        this.accessToken = userRefresh.accessToken;\n        localStorage.refreshToken = userRefresh.refreshToken;\n      }),\n      map(() => of(true)),\n    );\n  }\n\n  public changePassword(username: string, userKind: string, oldPassword: string, newPassword: string): Observable<{}> {\n    return this.httpClient.post<{}>(\n      '/api/users/change-password',\n      {\n        username, userKind, oldPassword, newPassword,\n      });\n  }\n\n  public getCurrentUser(): CurrentUser | null {\n    return this.currentUser;\n  }\n\n  public getAccessToken(): string | null {\n    return this.accessToken;\n  }\n\n  public getRefreshToken(): string | null {\n    return localStorage.refreshToken;\n  }\n\n  public logoutUser(): void {\n    this.accessToken = null;\n    this.currentUser = null;\n    localStorage.refreshToken = null;\n  }\n}\n","<div *ngIf=\"loggedIn\">\n  <button mat-button [matMenuTriggerFor]=\"menu\">\n    <mat-icon aria-hidden=\"false\" aria-label=\"User Account\">account_circle</mat-icon>\n    <span>{{displayName}} ({{username}})</span>\n  </button>\n  <mat-menu #menu=\"matMenu\">\n    <button mat-menu-item (click)=\"navigateToProfile()\">Profile</button>\n    <button mat-menu-item (click)=\"navigateToLogout()\">Logout</button>\n  </mat-menu>\n</div>\n<div *ngIf=\"!loggedIn\">\n  <button mat-button (click)=\"navigateToLogin()\">\n    <mat-icon aria-hidden=\"false\" aria-label=\"User Account\">account_circle</mat-icon>\n    <span>Login</span>\n  </button>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { UsersService } from '../../services/users.service';\n\n@Component({\n  selector: 'app-current-user',\n  templateUrl: './current-user.component.html',\n  styleUrls: ['./current-user.component.css']\n})\nexport class CurrentUserComponent implements OnInit {\n\n  get loggedIn(): boolean {\n    return !!this.usersSvc.getCurrentUser();\n  }\n\n  get displayName(): string {\n    return this.usersSvc.getCurrentUser()?.displayName ?? '';\n  }\n\n  get username(): string {\n    return this.usersSvc.getCurrentUser()?.username ?? '';\n  }\n\n  constructor(private router: Router, private usersSvc: UsersService) { }\n\n  ngOnInit(): void {\n  }\n\n  public navigateToProfile(): Promise<boolean> {\n    return this.router.navigateByUrl('/profile');\n  }\n\n  public navigateToLogout(): Promise<boolean> {\n    return this.router.navigateByUrl('/logout');\n  }\n\n  public navigateToLogin(): Promise<boolean> {\n    return this.router.navigateByUrl('/login');\n  }\n\n}\n","<mat-card class=\"validation-summary-card\" *ngIf=\"showLoginFormValidationSummary\">\n  <mat-card-header class=\"validation-summary-header\">\n    <mat-card-title class=\"validation-summary-title\">\n      Errors\n    </mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <mat-list role=\"list\" dense>\n      <mat-list-item role=\"listitem\" *ngIf=\"showUsernameError\">\n        <mat-icon mat-list-icon>arrow_right</mat-icon>\n        Username is required.\n      </mat-list-item>\n      <mat-list-item role=\"listitem\" *ngIf=\"showPasswordError\">\n        <mat-icon mat-list-icon>arrow_right</mat-icon>\n        Password is required.\n      </mat-list-item>\n    </mat-list>\n  </mat-card-content>\n</mat-card>\n\n\n<form class=\"login-form\" [formGroup]=\"loginForm\" (submit)=\"doLogin()\">\n\n  <div class=\"form-field\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Username</mat-label>\n      <input matInput formControlName=\"username\" />\n      <mat-error *ngIf=\"showUsernameError\">Username is required</mat-error>\n    </mat-form-field>\n  </div>\n\n  <div class=\"form-field\">\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input matInput formControlName=\"password\" />\n      <mat-error *ngIf=\"showPasswordError\">Password is required</mat-error>\n    </mat-form-field>\n  </div>\n\n  <div class=\"buttons\">\n    <button type=\"submit\" mat-raised-button color=\"primary\">Login</button>\n    <button type=\"reset\" mat-raised-button (click)=\"doClear()\">Clear</button>\n  </div>\n\n</form>","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { LoginForm } from '../../models/LoginForm';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.css']\n})\nexport class LoginFormComponent implements OnInit {\n\n  loginForm!: FormGroup;\n  loginFormSubmitted = false;\n\n  @Output()\n  login = new EventEmitter<LoginForm>();\n\n  @Output()\n  clear = new EventEmitter<void>();\n\n  get showLoginFormValidationSummary() {\n    return this.loginForm.invalid && this.loginFormSubmitted;\n  }\n\n  get showUsernameError() {\n    const usernameFormControl = this.loginForm.get('username');\n    return usernameFormControl!.invalid;\n  }\n\n  get showPasswordError() {\n    const passwordFormControl = this.loginForm.get('password');\n    return passwordFormControl!.invalid;\n  }\n\n  constructor(private fb: FormBuilder) { }\n\n  // username: 'adodsworth'\n  // password: 'testpass'\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['adodsworth', { validators: [Validators.required] }],\n      password: ['testpass', { validators: [Validators.required] }],\n    });\n  }\n\n  doLogin(): void {\n    this.loginFormSubmitted = true;\n    if (this.loginForm.invalid) return;\n    this.login.emit(this.loginForm!.value);\n  }\n\n  doClear(): void {\n    this.loginForm!.reset();\n    this.clear.emit();\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { UserProfile } from '../../models/UserProfile';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  @Input()\n  public userProfile: UserProfile | null = null;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div>\n  <div>Username: {{userProfile?.username}}</div>\n  <div>Display Name: {{userProfile?.displayName}}</div>\n  <div>Roles: {{userProfile?.roles?.join(', ')}}</div>\n</div>","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MatListModule } from '@angular/material/list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\n\nimport { ChangePasswordFormComponent } from './components/change-password-form/change-password-form.component';\nimport { CurrentUserComponent } from './components/current-user/current-user.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\n\n@NgModule({\n  declarations: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MatListModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    MatTableModule,\n    MatSnackBarModule,\n  ],\n  exports: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n})\nexport class UserLibModule { }\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { UsersService } from '../services/users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllowedRolesGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private snackBar: MatSnackBar) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot)\n    : boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n    if (!this.usersSvc.getCurrentUser()?.hasRole(route.data.roles)) {\n      const snackBarRef = this.snackBar.open(\n        `You are not allowed to navigate to the ${route.data.title}.`,\n        'Dismiss');\n      snackBarRef.onAction().subscribe(() => {\n        snackBarRef.dismiss();\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationInterceptorService implements HttpInterceptor {\n\n  constructor(private usersSvc: UsersService) { }\n\n  withAccessToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getAccessToken(),\n      ),\n    });\n  }\n\n  withRefreshToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      method: 'GET',\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getRefreshToken(),\n      ),\n    });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (req.url.endsWith('/api/users/login')) {\n      return next.handle(req);\n    }\n\n    if (req.url.endsWith('/api/users/refresh')) {\n      return next.handle(this.withRefreshToken(req));\n    }\n\n    return next.handle(this.withAccessToken(req)).pipe(\n      catchError((err, caught) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            return this.usersSvc.refreshUser()\n              .pipe(\n                switchMap(() => next.handle(this.withAccessToken(req)))\n              );\n          } else {\n            return throwError(err);\n          }\n        }\n        return caught;\n      })\n    );\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot, CanActivate,\n  RouterStateSnapshot, UrlTree, Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedInGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private router: Router) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n      if (!this.usersSvc.getCurrentUser()) {\n        return this.router.parseUrl('/login');\n      } else {\n        return true;\n      }\n\n  }\n}\n"]}